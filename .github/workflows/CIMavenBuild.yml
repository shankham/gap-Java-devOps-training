name: CI non containerization build
on:
 workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{secrets.DB_USERNAME}}
          POSTGRES_PASSWORD: ${{secrets.DB_PASSWORD}}
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U testuser"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/test
      SPRING_DATASOURCE_USERNAME: ${{secrets.DB_USERNAME}}
      SPRING_DATASOURCE_PASSWORD: ${{secrets.DB_PASSWORD}}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Build with Maven (skip tests)
      run: mvn clean package -DskipTests
      
    - name: Create staging directory and copy JAR
      run: |
        mkdir -p staging
        cp target/*.jar staging/

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: package
        path: staging/

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Java JDK
        uses: actions/setup-java@v3.14.1
        with:
          java-version: '17'
          distribution: 'oracle'
      - name: Run Maven Tests
        run: mvn test
  package:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: java-build
          path: staging
      - name: List downloaded files
        run: ls staging
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [package ]
    steps:
      - name: Deployment Step
        run: |
          echo "Deploying application..."
          echo "Environment: ${{ inputs.TARGE_ENVIRONMENT }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Commit: ${{ github.sha }}"




            
   
